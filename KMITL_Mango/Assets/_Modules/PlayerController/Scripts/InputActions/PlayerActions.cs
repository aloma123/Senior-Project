//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Modules/PlayerController/Scripts/InputActions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""KeyboardMouse"",
            ""id"": ""31cf60f9-3825-4126-bc30-07fb9a0e74ff"",
            ""actions"": [
                {
                    ""name"": ""MouseScrollY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""64d050ea-6688-4821-96a3-da487824e117"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseAxis"",
                    ""type"": ""Value"",
                    ""id"": ""a324a735-c060-4080-84a7-da9d20af8bc3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftMouseRelease"",
                    ""type"": ""Button"",
                    ""id"": ""7227209a-2a0e-4369-929b-50035aeb51d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseRelease"",
                    ""type"": ""Button"",
                    ""id"": ""0ef7f0ec-50b8-4266-a899-d07b622f6b36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMousePressed"",
                    ""type"": ""Button"",
                    ""id"": ""3c0b7e38-d925-48a1-9e51-6aeb7696c6e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMousePressed"",
                    ""type"": ""Button"",
                    ""id"": ""11b5cf66-67e2-4ca3-b23b-59c92cae72a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleLeftPressed"",
                    ""type"": ""Button"",
                    ""id"": ""5479245d-f495-4a37-b6ca-73f8d8abb026"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""8b9efe71-12b2-4b09-a8bd-e94f96932b3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""126105fa-3ff5-4cd4-b6f9-dbf5542d3be8"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a4089b4-faf7-4bdf-ae3a-4abff5d4877e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0221549-c886-4f02-a78f-5f382f812422"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53496f9f-b852-46ff-b542-8ab5cefd1245"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMouseRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f363053c-19b7-48a4-8351-2f234f759551"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMousePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf43d856-3b43-413b-b58f-e535aa55e9ae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMousePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60149a62-97c2-4e11-adb0-af08d93dea14"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapDelay=0.3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleLeftPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe8a85fa-f085-471b-a6f2-57ab8927ad35"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d3585ed-1511-46e7-b169-7defff22126b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""f0215a8f-505e-4372-be09-8827926f3932"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""8c06cbbf-99de-44a5-b59a-a345ac74a810"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""31c19f6c-34f9-4f97-80c7-d3e9b44f8e2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""fe8552f4-785a-43b3-899c-75eb2cf6e9b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryDoubleTap"",
                    ""type"": ""Button"",
                    ""id"": ""2451b27a-6839-431c-8715-e0e004ce8b2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""36592931-f593-4500-86b4-e8f109b1fa10"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""86562aee-6067-45b2-91a6-e5dc17ffa69d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""eeda8c4b-0e01-492a-80c8-5901a7e48159"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f668319a-fb05-428e-bd2e-f5aa4ed48cbe"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""188884f4-5636-4abe-adbb-f985bb82f85f"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cd4bbc1-ac7d-4c3b-abf3-2d86a4ad37ae"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""570f8628-ab9d-430c-9471-0306adc45adb"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5efe3b5-ea9d-4ef0-8013-dc8205ff3fbf"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3381c758-cda9-4468-88c4-452ccdc2d41a"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6de81c9-646b-49d3-979e-a8b7f74e6078"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryDoubleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardMouse
        m_KeyboardMouse = asset.FindActionMap("KeyboardMouse", throwIfNotFound: true);
        m_KeyboardMouse_MouseScrollY = m_KeyboardMouse.FindAction("MouseScrollY", throwIfNotFound: true);
        m_KeyboardMouse_MouseAxis = m_KeyboardMouse.FindAction("MouseAxis", throwIfNotFound: true);
        m_KeyboardMouse_LeftMouseRelease = m_KeyboardMouse.FindAction("LeftMouseRelease", throwIfNotFound: true);
        m_KeyboardMouse_RightMouseRelease = m_KeyboardMouse.FindAction("RightMouseRelease", throwIfNotFound: true);
        m_KeyboardMouse_LeftMousePressed = m_KeyboardMouse.FindAction("LeftMousePressed", throwIfNotFound: true);
        m_KeyboardMouse_RightMousePressed = m_KeyboardMouse.FindAction("RightMousePressed", throwIfNotFound: true);
        m_KeyboardMouse_DoubleLeftPressed = m_KeyboardMouse.FindAction("DoubleLeftPressed", throwIfNotFound: true);
        m_KeyboardMouse_Crouch = m_KeyboardMouse.FindAction("Crouch", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_PrimaryTouchDelta = m_Touch.FindAction("PrimaryTouchDelta", throwIfNotFound: true);
        m_Touch_PrimaryTouchContact = m_Touch.FindAction("PrimaryTouchContact", throwIfNotFound: true);
        m_Touch_PrimaryTouchPosition = m_Touch.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
        m_Touch_PrimaryDoubleTap = m_Touch.FindAction("PrimaryDoubleTap", throwIfNotFound: true);
        m_Touch_SecondaryTouchDelta = m_Touch.FindAction("SecondaryTouchDelta", throwIfNotFound: true);
        m_Touch_SecondaryTouchContact = m_Touch.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        m_Touch_SecondaryTouchPosition = m_Touch.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardMouse
    private readonly InputActionMap m_KeyboardMouse;
    private List<IKeyboardMouseActions> m_KeyboardMouseActionsCallbackInterfaces = new List<IKeyboardMouseActions>();
    private readonly InputAction m_KeyboardMouse_MouseScrollY;
    private readonly InputAction m_KeyboardMouse_MouseAxis;
    private readonly InputAction m_KeyboardMouse_LeftMouseRelease;
    private readonly InputAction m_KeyboardMouse_RightMouseRelease;
    private readonly InputAction m_KeyboardMouse_LeftMousePressed;
    private readonly InputAction m_KeyboardMouse_RightMousePressed;
    private readonly InputAction m_KeyboardMouse_DoubleLeftPressed;
    private readonly InputAction m_KeyboardMouse_Crouch;
    public struct KeyboardMouseActions
    {
        private @PlayerActions m_Wrapper;
        public KeyboardMouseActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseScrollY => m_Wrapper.m_KeyboardMouse_MouseScrollY;
        public InputAction @MouseAxis => m_Wrapper.m_KeyboardMouse_MouseAxis;
        public InputAction @LeftMouseRelease => m_Wrapper.m_KeyboardMouse_LeftMouseRelease;
        public InputAction @RightMouseRelease => m_Wrapper.m_KeyboardMouse_RightMouseRelease;
        public InputAction @LeftMousePressed => m_Wrapper.m_KeyboardMouse_LeftMousePressed;
        public InputAction @RightMousePressed => m_Wrapper.m_KeyboardMouse_RightMousePressed;
        public InputAction @DoubleLeftPressed => m_Wrapper.m_KeyboardMouse_DoubleLeftPressed;
        public InputAction @Crouch => m_Wrapper.m_KeyboardMouse_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMouseActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Add(instance);
            @MouseScrollY.started += instance.OnMouseScrollY;
            @MouseScrollY.performed += instance.OnMouseScrollY;
            @MouseScrollY.canceled += instance.OnMouseScrollY;
            @MouseAxis.started += instance.OnMouseAxis;
            @MouseAxis.performed += instance.OnMouseAxis;
            @MouseAxis.canceled += instance.OnMouseAxis;
            @LeftMouseRelease.started += instance.OnLeftMouseRelease;
            @LeftMouseRelease.performed += instance.OnLeftMouseRelease;
            @LeftMouseRelease.canceled += instance.OnLeftMouseRelease;
            @RightMouseRelease.started += instance.OnRightMouseRelease;
            @RightMouseRelease.performed += instance.OnRightMouseRelease;
            @RightMouseRelease.canceled += instance.OnRightMouseRelease;
            @LeftMousePressed.started += instance.OnLeftMousePressed;
            @LeftMousePressed.performed += instance.OnLeftMousePressed;
            @LeftMousePressed.canceled += instance.OnLeftMousePressed;
            @RightMousePressed.started += instance.OnRightMousePressed;
            @RightMousePressed.performed += instance.OnRightMousePressed;
            @RightMousePressed.canceled += instance.OnRightMousePressed;
            @DoubleLeftPressed.started += instance.OnDoubleLeftPressed;
            @DoubleLeftPressed.performed += instance.OnDoubleLeftPressed;
            @DoubleLeftPressed.canceled += instance.OnDoubleLeftPressed;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
        }

        private void UnregisterCallbacks(IKeyboardMouseActions instance)
        {
            @MouseScrollY.started -= instance.OnMouseScrollY;
            @MouseScrollY.performed -= instance.OnMouseScrollY;
            @MouseScrollY.canceled -= instance.OnMouseScrollY;
            @MouseAxis.started -= instance.OnMouseAxis;
            @MouseAxis.performed -= instance.OnMouseAxis;
            @MouseAxis.canceled -= instance.OnMouseAxis;
            @LeftMouseRelease.started -= instance.OnLeftMouseRelease;
            @LeftMouseRelease.performed -= instance.OnLeftMouseRelease;
            @LeftMouseRelease.canceled -= instance.OnLeftMouseRelease;
            @RightMouseRelease.started -= instance.OnRightMouseRelease;
            @RightMouseRelease.performed -= instance.OnRightMouseRelease;
            @RightMouseRelease.canceled -= instance.OnRightMouseRelease;
            @LeftMousePressed.started -= instance.OnLeftMousePressed;
            @LeftMousePressed.performed -= instance.OnLeftMousePressed;
            @LeftMousePressed.canceled -= instance.OnLeftMousePressed;
            @RightMousePressed.started -= instance.OnRightMousePressed;
            @RightMousePressed.performed -= instance.OnRightMousePressed;
            @RightMousePressed.canceled -= instance.OnRightMousePressed;
            @DoubleLeftPressed.started -= instance.OnDoubleLeftPressed;
            @DoubleLeftPressed.performed -= instance.OnDoubleLeftPressed;
            @DoubleLeftPressed.canceled -= instance.OnDoubleLeftPressed;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
        }

        public void RemoveCallbacks(IKeyboardMouseActions instance)
        {
            if (m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardMouseActions @KeyboardMouse => new KeyboardMouseActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_PrimaryTouchDelta;
    private readonly InputAction m_Touch_PrimaryTouchContact;
    private readonly InputAction m_Touch_PrimaryTouchPosition;
    private readonly InputAction m_Touch_PrimaryDoubleTap;
    private readonly InputAction m_Touch_SecondaryTouchDelta;
    private readonly InputAction m_Touch_SecondaryTouchContact;
    private readonly InputAction m_Touch_SecondaryTouchPosition;
    public struct TouchActions
    {
        private @PlayerActions m_Wrapper;
        public TouchActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouchDelta => m_Wrapper.m_Touch_PrimaryTouchDelta;
        public InputAction @PrimaryTouchContact => m_Wrapper.m_Touch_PrimaryTouchContact;
        public InputAction @PrimaryTouchPosition => m_Wrapper.m_Touch_PrimaryTouchPosition;
        public InputAction @PrimaryDoubleTap => m_Wrapper.m_Touch_PrimaryDoubleTap;
        public InputAction @SecondaryTouchDelta => m_Wrapper.m_Touch_SecondaryTouchDelta;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_Touch_SecondaryTouchContact;
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_Touch_SecondaryTouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @PrimaryTouchDelta.started += instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.performed += instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.canceled += instance.OnPrimaryTouchDelta;
            @PrimaryTouchContact.started += instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.performed += instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.canceled += instance.OnPrimaryTouchContact;
            @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
            @PrimaryDoubleTap.started += instance.OnPrimaryDoubleTap;
            @PrimaryDoubleTap.performed += instance.OnPrimaryDoubleTap;
            @PrimaryDoubleTap.canceled += instance.OnPrimaryDoubleTap;
            @SecondaryTouchDelta.started += instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.performed += instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.canceled += instance.OnSecondaryTouchDelta;
            @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
            @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @PrimaryTouchDelta.started -= instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.performed -= instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.canceled -= instance.OnPrimaryTouchDelta;
            @PrimaryTouchContact.started -= instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.performed -= instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.canceled -= instance.OnPrimaryTouchContact;
            @PrimaryTouchPosition.started -= instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.performed -= instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.canceled -= instance.OnPrimaryTouchPosition;
            @PrimaryDoubleTap.started -= instance.OnPrimaryDoubleTap;
            @PrimaryDoubleTap.performed -= instance.OnPrimaryDoubleTap;
            @PrimaryDoubleTap.canceled -= instance.OnPrimaryDoubleTap;
            @SecondaryTouchDelta.started -= instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.performed -= instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.canceled -= instance.OnSecondaryTouchDelta;
            @SecondaryTouchContact.started -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled -= instance.OnSecondaryTouchContact;
            @SecondaryTouchPosition.started -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled -= instance.OnSecondaryTouchPosition;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface IKeyboardMouseActions
    {
        void OnMouseScrollY(InputAction.CallbackContext context);
        void OnMouseAxis(InputAction.CallbackContext context);
        void OnLeftMouseRelease(InputAction.CallbackContext context);
        void OnRightMouseRelease(InputAction.CallbackContext context);
        void OnLeftMousePressed(InputAction.CallbackContext context);
        void OnRightMousePressed(InputAction.CallbackContext context);
        void OnDoubleLeftPressed(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnPrimaryTouchDelta(InputAction.CallbackContext context);
        void OnPrimaryTouchContact(InputAction.CallbackContext context);
        void OnPrimaryTouchPosition(InputAction.CallbackContext context);
        void OnPrimaryDoubleTap(InputAction.CallbackContext context);
        void OnSecondaryTouchDelta(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
    }
}
